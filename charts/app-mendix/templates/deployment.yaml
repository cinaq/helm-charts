apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-leader
  labels:
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
{{- if ge .Values.replicaCount 1.0 }}
  replicas: 1
{{- else }}
  replicas: 0
{{- end }}
  selector:
    matchLabels:
      app: {{ template "name" . }}
      release: {{ .Release.Name }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
      {{- if .Values.metrics.enabled }}
      annotations:
        prometheus.io/scrape: {{ .Values.metrics.scrape | quote}}
        prometheus.io/path: "/metrics"
        prometheus.io/port: {{ add .Values.service.internalPort 3 | quote}}
      {{- end }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
            {{- if .Values.metrics.enabled }}
            - containerPort: {{ add .Values.service.internalPort 3}}
              name: metrics
            {{- end }}
          env:
            - name: CF_INSTANCE_INDEX
              value: "0"
            - name: TZ
              value: {{ .Values.timezone | quote}}
            - name: LICENSE_ID
              value: {{ .Values.mendixSystem.licenseId | quote}}
            - name: LICENSE_KEY
              value: {{ .Values.mendixSystem.licenseKey | quote}}
            - name: PORT
              value: {{ .Values.service.internalPort | quote}}
            {{- if ne .Values.mendixSystem.adminPassword "" }}
            - name: ADMIN_PASSWORD
              value: {{ .Values.mendixSystem.adminPassword | quote}}
            {{- end }}
            {{- if .Values.ingress.enabled }}
            - name: MXRUNTIME_ApplicationRootUrl
            {{- if .Values.ingress.tls.enabled }}
              value: "https://{{ .Release.Name }}.{{ .Values.ingress.domain }}/"
            {{- else }}
              value: "http://{{ .Release.Name }}.{{ .Values.ingress.domain }}/"
            {{- end }}
            {{- end }}
            - name: OPENMETRICS_ENABLED
              value: {{ .Values.metrics.enabled | quote}}
            - name: MXRUNTIME_DatabaseHost
              value: {{ .Values.mendixSystem.database.host | quote}}
            - name: MXRUNTIME_DatabaseType
              value: {{ .Values.mendixSystem.database.type | quote}}
            - name: MXRUNTIME_DatabaseName
              value: {{ .Values.mendixSystem.database.dbname | quote}}
            - name: MXRUNTIME_DatabaseUserName
              value: {{ .Values.mendixSystem.database.username | quote}}
            - name: MXRUNTIME_DatabasePassword
              value: {{ .Values.mendixSystem.database.password | quote}}
            - name: S3_BUCKET_NAME
              value: {{ .Values.mendixSystem.objectstore.s3BucketName | quote}}
            - name: S3_ENDPOINT
              value: {{ .Values.mendixSystem.objectstore.s3Endpoint | quote}}
            - name: S3_ACCESS_KEY_ID
              value: {{ .Values.mendixSystem.objectstore.s3AccessKeyId | quote}}
            - name: S3_SECRET_ACCESS_KEY
              value: {{ .Values.mendixSystem.objectstore.s3SecretAccessKey | quote}}
          {{- if .Values.configuration.enabled }}
          {{- range .Values.configuration.envs }}
            - name: {{ .name | quote}}
              value: {{ .value | quote}}
          {{- end }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- if eq "httpGet" .Values.readinessProbe.type }}
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.readinessProbe.httpGet.port }}
            {{- else if eq "exec" .Values.readinessProbe.type }}
            exec:
              command:
              {{- range .Values.readinessProbe.exec.command }}
              - {{ . }}
              {{- end }}
            {{- else if eq "tcpSocket" .Values.readinessProbe.type }}
            tcpSocket:
              port: {{ .Values.readinessProbe.tcpSocket.port }}
            {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- if eq "httpGet" .Values.livenessProbe.type }}
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path }}
              port: {{ .Values.livenessProbe.httpGet.port }}
            {{- else if eq "exec" .Values.livenessProbe.type }}
            exec:
              command:
              {{- range .Values.livenessProbe.exec.command }}
              - {{ . }}
              {{- end }}
            {{- else if eq "tcpSocket" .Values.livenessProbe.type }}
            tcpSocket:
              port: {{ .Values.livenessProbe.tcpSocket.port }}
            {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.lifecycle.prestop.enabled }}
          lifecycle:
            preStop:
              exec:
                command: [{{ .Values.lifecycle.prestop.command }}]
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 6 }}
      {{- end }}
      {{- if .Values.nodeSelector.enabled }}
      nodeSelector:
        kubernetes.io/nodetype: {{ .Values.nodeSelector.nodetype }}
      {{- end }}


---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-slave
  labels:
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
{{- if .Values.autoscale.enabled }}
  replicas: {{ .Values.autoscale.minSlaveReplicas }}
{{- else }}
  replicas: {{ sub .Values.replicaCount 1.0 }}
{{- end }}
  selector:
    matchLabels:
      app: {{ template "name" . }}
      release: {{ .Release.Name }}
  {{- if .Values.strategy.enabled }}
  strategy:
    type: {{ .Values.strategy.type }}
    {{- if eq "RollingUpdate" .Values.strategy.type }}
    rollingUpdate:
      maxSurge: {{ .Values.strategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.strategy.rollingUpdate.maxUnavailable }}
    {{- end }}
  {{- end }}
  template:
    metadata:
      labels:
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
      {{- if .Values.metrics.enabled }}
      annotations:
        prometheus.io/scrape: {{ .Values.metrics.scrape | quote}}
        prometheus.io/path: "/metrics"
        prometheus.io/port: {{ add .Values.service.internalPort 3 | quote}}
      {{- end }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
            {{- if .Values.metrics.enabled }}
            - containerPort: {{ add .Values.service.internalPort 3 }}
            {{- end }}
          env:
            - name: CF_INSTANCE_INDEX
              value: "1"
            - name: TZ
              value: {{ .Values.timezone | quote}}
            - name: LICENSE_ID
              value: {{ .Values.mendixSystem.licenseId | quote}}
            - name: LICENSE_KEY
              value: {{ .Values.mendixSystem.licenseKey | quote}}
            - name: PORT
              value: {{ .Values.service.internalPort | quote}}
            {{- if ne .Values.mendixSystem.adminPassword "" }}
            - name: ADMIN_PASSWORD
              value: {{ .Values.mendixSystem.adminPassword | quote}}
            {{- end }}
            {{- if .Values.ingress.enabled }}
            - name: MXRUNTIME_ApplicationRootUrl
            {{- if .Values.ingress.tls.enabled }}
              value: "https://{{ .Release.Name }}.{{ .Values.ingress.domain }}/"
            {{- else }}
              value: "http://{{ .Release.Name }}.{{ .Values.ingress.domain }}/"
            {{- end }}
            {{- end }}
            - name: METRICS_SERVICE_ENABLED
              value: {{ .Values.metrics.enabled | quote}}
            - name: MXRUNTIME_DatabaseHost
              value: {{ .Values.mendixSystem.database.host | quote}}
            - name: MXRUNTIME_DatabaseType
              value: {{ .Values.mendixSystem.database.type | quote}}
            - name: MXRUNTIME_DatabaseName
              value: {{ .Values.mendixSystem.database.dbname | quote}}
            - name: MXRUNTIME_DatabaseUserName
              value: {{ .Values.mendixSystem.database.username | quote}}
            - name: MXRUNTIME_DatabasePassword
              value: {{ .Values.mendixSystem.database.password | quote}}
            - name: S3_BUCKET_NAME
              value: {{ .Values.mendixSystem.objectstore.s3BucketName | quote}}
            - name: S3_ENDPOINT
              value: {{ .Values.mendixSystem.objectstore.s3Endpoint | quote}}
            - name: S3_ACCESS_KEY_ID
              value: {{ .Values.mendixSystem.objectstore.s3AccessKeyId | quote}}
            - name: S3_SECRET_ACCESS_KEY
              value: {{ .Values.mendixSystem.objectstore.s3SecretAccessKey | quote}}
          {{- if .Values.configuration.enabled }}
          {{- range .Values.configuration.envs }}
            - name: {{ .name | quote}}
              value: {{ .value | quote}}
          {{- end }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- if eq "httpGet" .Values.readinessProbe.type }}
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.readinessProbe.httpGet.port }}
            {{- else if eq "exec" .Values.readinessProbe.type }}
            exec:
              command:
              {{- range .Values.readinessProbe.exec.command }}
              - {{ . }}
              {{- end }}
            {{- else if eq "tcpSocket" .Values.readinessProbe.type }}
            tcpSocket:
              port: {{ .Values.readinessProbe.tcpSocket.port }}
            {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- if eq "httpGet" .Values.livenessProbe.type }}
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path }}
              port: {{ .Values.livenessProbe.httpGet.port }}
            {{- else if eq "exec" .Values.livenessProbe.type }}
            exec:
              command:
              {{- range .Values.livenessProbe.exec.command }}
              - {{ . }}
              {{- end }}
            {{- else if eq "tcpSocket" .Values.livenessProbe.type }}
            tcpSocket:
              port: {{ .Values.livenessProbe.tcpSocket.port }}
            {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.lifecycle.prestop.enabled }}
          lifecycle:
            preStop:
              exec:
                command: [{{ .Values.lifecycle.prestop.command }}]
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 6 }}
      {{- end }}
      {{- if .Values.nodeSelector.enabled }}
      nodeSelector:
        kubernetes.io/nodetype: {{ .Values.nodeSelector.nodetype }}
      {{- end }}
