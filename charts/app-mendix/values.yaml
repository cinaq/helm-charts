# initial replica, if:
# less than 1    => no leader or slaves
# equal 1        => 1 leader no slaves
# larger than 1  => 1 leader, rest slaves
replicaCount: 1

metrics:
  # if enabled, metrics are exposed at service.internalPort + 3 e.d. localhost:8083/metrics
  enabled: true
  scrape: true

image:
  repository: "cinaq/hackme"
  tag: "latest"
  pullPolicy: "Always"
imagePullSecrets:
  - name: dockerconfigjson

licenseId:
licenseKey:

env: []
  # - name: SCHEDULED_EVENTS
  #   value: ALL
  # - name: MX_Module_Constant
  #   value: test
  # - name: MX_App_EnvironmentName
  #   value: acceptance
  # - name: TZ
  #   value: Europe/Amsterdam
  # - name: PORT
  #   value: 8080
  # - name: MXRUNTIME_ApplicationRootUrl
  #   value: "https://mx-app.example.com/"
  # - name: METRICS_SERVICE_ENABLED
  #   value: "true"
  # - name: MXRUNTIME_DatabaseHost
  #   value: "mendix-postgres:5432"
  # - name: MXRUNTIME_DatabaseType
  #   value: "PostgreSQL"
  # - name: MXRUNTIME_DatabaseName
  #   value: "mendix"
  # - name: S3_BUCKET_NAME
  #   value: "test-mx-app"
  # - name: S3_ENDPOINT
  #   value: "http://minio:9000"
  # - name: ADMIN_PASSWORD
  #   value: "Hello0123!!"
  # - name: MXRUNTIME_DatabaseUserName
  #   value: "postgres"
  # - name: MXRUNTIME_DatabasePassword
  #   value: "postgres12!"
  # - name: S3_ACCESS_KEY_ID
  #   value: "keyid"
  # - name: S3_SECRET_ACCESS_KEY
  #   value: "accesskey"

# Secret name with mendix application runtime variables. Will be loaded as pod environment variables
#  Example data
#  data:
#   ADMIN_PASSWORD: SGVsbG8wMTIzY2xlYXIK (base64)
secretName: ""

nodeSelector: {}

tolerations: []

affinity: {}

resources: {}
  # limits:
  #   cpu: 1
  #   memory: 1Gi
  # requests:
  #   cpu: 0.5
  #   memory: 512Mi

annotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: "/metrics"
  prometheus.io/port: "8080"

service:
  type: ClusterIP
  externalPort: 80
  internalPort: 8080

ingress:
  enabled: true
  ingressClassName: nginx
  domain: paas
  annotations: {}
  addHosts: false
  hosts: []
  tls:
    enabled: false
  # Secrets must be manually created in the namespace.
    secretName: secret-tls
networkPolicy:
  enabled: true
  ingress:
    allowed: true
autoscale:
  # only affects slave deployment
  # If enabled, slave replicas starts with minSlaveReplicas
  enabled: false
  minSlaveReplicas: 1
  maxSlaveReplicas: 3
  targetCPUUtilizationPercentage: 70

strategy:
  enabled: false
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

readinessProbe:
  enabled: true
  type: httpGet
  httpGet:
    path: /
    port: 8080
  exec: 
    command:
  tcpSocket:
    port:
  initialDelaySeconds: 120
  periodSeconds: 10
  failureThreshold: 3
  timeoutSeconds: 1
  successThreshold: 1

livenessProbe:
  enabled: true
  type: httpGet
  httpGet:
    path: /
    port: 8080
  exec: 
    command:
  tcpSocket:
    port:
  initialDelaySeconds: 200
  periodSeconds: 20
  failureThreshold: 3
  timeoutSeconds: 1
  successThreshold: 1

lifecycle:
  prestop:
    enabled: false
    command: /opt/eap/bin/stop.sh
